{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'

// exports for external consumption
export type BigintIsh = JSBI | bigint | string

export enum ChainId {
  MAINNET = 1,
  ROPSTEN = 3,
  RINKEBY = 4,
  GÖRLI = 5,
  KOVAN = 42,
  BITGERT = 32520
}

export enum TradeType {
  EXACT_INPUT,
  EXACT_OUTPUT
}

export enum Rounding {
  ROUND_DOWN,
  ROUND_HALF_UP,
  ROUND_UP
}

export const FACTORY_ADDRESS = '0x9E6d21E759A7A288b80eef94E4737D313D31c13f'

export const INIT_CODE_HASH = '0x58c1b429d0ffdb4407396ae8118c58fed54898473076d0394163ea2198f7c4a3'

export const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)

// exports for internal consumption
export const ZERO = JSBI.BigInt(0)
export const ONE = JSBI.BigInt(1)
export const TWO = JSBI.BigInt(2)
export const THREE = JSBI.BigInt(3)
export const FIVE = JSBI.BigInt(5)
export const TEN = JSBI.BigInt(10)
export const _100 = JSBI.BigInt(100)
export const _997 = JSBI.BigInt(997)
export const _1000 = JSBI.BigInt(1000)

export enum SolidityType {
  uint8 = 'uint8',
  uint256 = 'uint256'
}

export const SOLIDITY_TYPE_MAXIMA = {
  [SolidityType.uint8]: JSBI.BigInt('0xff'),
  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')
}
","// see https://stackoverflow.com/a/41102306
const CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object

/**
 * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be
 * obtained by sending any amount of input.
 */
export class InsufficientReservesError extends Error {
  public readonly isInsufficientReservesError: true = true

  public constructor() {
    super()
    this.name = this.constructor.name
    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)
  }
}

/**
 * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less
 * than the price of a single unit of output after fees.
 */
export class InsufficientInputAmountError extends Error {
  public readonly isInsufficientInputAmountError: true = true

  public constructor() {
    super()
    this.name = this.constructor.name
    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)
  }
}
","import invariant from 'tiny-invariant'
import warning from 'tiny-warning'
import JSBI from 'jsbi'
import { getAddress } from '@ethersproject/address'

import { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'

export function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {
  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)
  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)
}

// warns if addresses are not checksummed
export function validateAndParseAddress(address: string): string {
  try {
    const checksummedAddress = getAddress(address)
    warning(address === checksummedAddress, `${address} is not checksummed.`)
    return checksummedAddress
  } catch (error) {
    invariant(false, `${address} is not a valid address.`)
  }
}

export function parseBigintIsh(bigintIsh: BigintIsh): JSBI {
  return bigintIsh instanceof JSBI
    ? bigintIsh
    : typeof bigintIsh === 'bigint'
    ? JSBI.BigInt(bigintIsh.toString())
    : JSBI.BigInt(bigintIsh)
}

// mock the on-chain sqrt function
export function sqrt(y: JSBI): JSBI {
  validateSolidityTypeInstance(y, SolidityType.uint256)
  let z: JSBI = ZERO
  let x: JSBI
  if (JSBI.greaterThan(y, THREE)) {
    z = y
    x = JSBI.add(JSBI.divide(y, TWO), ONE)
    while (JSBI.lessThan(x, z)) {
      z = x
      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)
    }
  } else if (JSBI.notEqual(y, ZERO)) {
    z = ONE
  }
  return z
}

// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to
// `maxSize` by removing the last item
export function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {
  invariant(maxSize > 0, 'MAX_SIZE_ZERO')
  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize
  invariant(items.length <= maxSize, 'ITEMS_SIZE')

  // short circuit first item add
  if (items.length === 0) {
    items.push(add)
    return null
  } else {
    const isFull = items.length === maxSize
    // short circuit if full and the additional item does not come before the last item
    if (isFull && comparator(items[items.length - 1], add) <= 0) {
      return add
    }

    let lo = 0,
      hi = items.length

    while (lo < hi) {
      const mid = (lo + hi) >>> 1
      if (comparator(items[mid], add) <= 0) {
        lo = mid + 1
      } else {
        hi = mid
      }
    }
    items.splice(lo, 0, add)
    return isFull ? items.pop()! : null
  }
}
","import JSBI from 'jsbi'

import { SolidityType } from '../constants'
import { validateSolidityTypeInstance } from '../utils'

/**
 * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.
 *
 * The only instance of the base class `Currency` is Ether.
 */
export class Currency {
  public readonly decimals: number
  public readonly symbol?: string
  public readonly name?: string

  /**
   * The only instance of the base class `Currency`.
   */
  public static readonly ETHER: Currency = new Currency(18, 'BRISE', 'Brise')

  /**
   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.
   * @param decimals decimals of the currency
   * @param symbol symbol of the currency
   * @param name of the currency
   */
  protected constructor(decimals: number, symbol?: string, name?: string) {
    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)

    this.decimals = decimals
    this.symbol = symbol
    this.name = name
  }
}

const ETHER = Currency.ETHER
export { ETHER }
","import invariant from 'tiny-invariant'
import { ChainId } from '../constants'
import { validateAndParseAddress } from '../utils'
import { Currency } from './currency'

/**
 * Represents an ERC20 token with a unique address and some metadata.
 */
export class Token extends Currency {
  public readonly chainId: ChainId
  public readonly address: string

  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {
    super(decimals, symbol, name)
    this.chainId = chainId
    this.address = validateAndParseAddress(address)
  }

  /**
   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.
   * @param other other token to compare
   */
  public equals(other: Token): boolean {
    // short circuit on reference equality
    if (this === other) {
      return true
    }
    return this.chainId === other.chainId && this.address === other.address
  }

  /**
   * Returns true if the address of this token sorts before the address of the other token
   * @param other other token to compare
   * @throws if the tokens have the same address
   * @throws if the tokens are on different chains
   */
  public sortsBefore(other: Token): boolean {
    invariant(this.chainId === other.chainId, 'CHAIN_IDS')
    invariant(this.address !== other.address, 'ADDRESSES')
    return this.address.toLowerCase() < other.address.toLowerCase()
  }
}

/**
 * Compares two currencies for equality
 */
export function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {
  if (currencyA instanceof Token && currencyB instanceof Token) {
    return currencyA.equals(currencyB)
  } else if (currencyA instanceof Token) {
    return false
  } else if (currencyB instanceof Token) {
    return false
  } else {
    return currencyA === currencyB
  }
}

export const WETH = {
  [ChainId.MAINNET]: new Token(
    ChainId.MAINNET,
    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
    18,
    'WETH',
    'Wrapped Ether'
  ),
  [ChainId.ROPSTEN]: new Token(
    ChainId.ROPSTEN,
    '0xc778417E063141139Fce010982780140Aa0cD5Ab',
    18,
    'WETH',
    'Wrapped Ether'
  ),
  [ChainId.RINKEBY]: new Token(
    ChainId.RINKEBY,
    '0xc778417E063141139Fce010982780140Aa0cD5Ab',
    18,
    'WETH',
    'Wrapped Ether'
  ),
  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),
  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),
  [ChainId.BITGERT]: new Token(ChainId.BITGERT, '0x0eb9036cbE0f052386f36170c6b07eF0a0E3f710', 18, 'WBRISE', 'Wrapped Brise')
}
","import invariant from 'tiny-invariant'
import JSBI from 'jsbi'
import _Decimal from 'decimal.js-light'
import _Big, { RoundingMode } from 'big.js'
import toFormat from 'toformat'

import { BigintIsh, Rounding } from '../../constants'
import { ONE } from '../../constants'
import { parseBigintIsh } from '../../utils'

const Decimal = toFormat(_Decimal)
const Big = toFormat(_Big)

const toSignificantRounding = {
  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,
  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,
  [Rounding.ROUND_UP]: Decimal.ROUND_UP
}

const toFixedRounding = {
  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,
  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,
  [Rounding.ROUND_UP]: RoundingMode.RoundUp
}

export class Fraction {
  public readonly numerator: JSBI
  public readonly denominator: JSBI

  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {
    this.numerator = parseBigintIsh(numerator)
    this.denominator = parseBigintIsh(denominator)
  }

  // performs floor division
  public get quotient(): JSBI {
    return JSBI.divide(this.numerator, this.denominator)
  }

  // remainder after floor division
  public get remainder(): Fraction {
    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)
  }

  public invert(): Fraction {
    return new Fraction(this.denominator, this.numerator)
  }

  public add(other: Fraction | BigintIsh): Fraction {
    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))
    if (JSBI.equal(this.denominator, otherParsed.denominator)) {
      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)
    }
    return new Fraction(
      JSBI.add(
        JSBI.multiply(this.numerator, otherParsed.denominator),
        JSBI.multiply(otherParsed.numerator, this.denominator)
      ),
      JSBI.multiply(this.denominator, otherParsed.denominator)
    )
  }

  public subtract(other: Fraction | BigintIsh): Fraction {
    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))
    if (JSBI.equal(this.denominator, otherParsed.denominator)) {
      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)
    }
    return new Fraction(
      JSBI.subtract(
        JSBI.multiply(this.numerator, otherParsed.denominator),
        JSBI.multiply(otherParsed.numerator, this.denominator)
      ),
      JSBI.multiply(this.denominator, otherParsed.denominator)
    )
  }

  public lessThan(other: Fraction | BigintIsh): boolean {
    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))
    return JSBI.lessThan(
      JSBI.multiply(this.numerator, otherParsed.denominator),
      JSBI.multiply(otherParsed.numerator, this.denominator)
    )
  }

  public equalTo(other: Fraction | BigintIsh): boolean {
    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))
    return JSBI.equal(
      JSBI.multiply(this.numerator, otherParsed.denominator),
      JSBI.multiply(otherParsed.numerator, this.denominator)
    )
  }

  public greaterThan(other: Fraction | BigintIsh): boolean {
    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))
    return JSBI.greaterThan(
      JSBI.multiply(this.numerator, otherParsed.denominator),
      JSBI.multiply(otherParsed.numerator, this.denominator)
    )
  }

  public multiply(other: Fraction | BigintIsh): Fraction {
    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))
    return new Fraction(
      JSBI.multiply(this.numerator, otherParsed.numerator),
      JSBI.multiply(this.denominator, otherParsed.denominator)
    )
  }

  public divide(other: Fraction | BigintIsh): Fraction {
    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))
    return new Fraction(
      JSBI.multiply(this.numerator, otherParsed.denominator),
      JSBI.multiply(this.denominator, otherParsed.numerator)
    )
  }

  public toSignificant(
    significantDigits: number,
    format: object = { groupSeparator: '' },
    rounding: Rounding = Rounding.ROUND_HALF_UP
  ): string {
    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)
    invariant(significantDigits > 0, `${significantDigits} is not positive.`)

    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })
    const quotient = new Decimal(this.numerator.toString())
      .div(this.denominator.toString())
      .toSignificantDigits(significantDigits)
    return quotient.toFormat(quotient.decimalPlaces(), format)
  }

  public toFixed(
    decimalPlaces: number,
    format: object = { groupSeparator: '' },
    rounding: Rounding = Rounding.ROUND_HALF_UP
  ): string {
    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)
    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)

    Big.DP = decimalPlaces
    Big.RM = toFixedRounding[rounding]
    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)
  }
}
","import { currencyEquals } from '../token'
import { Currency, ETHER } from '../currency'
import invariant from 'tiny-invariant'
import JSBI from 'jsbi'
import _Big from 'big.js'
import toFormat from 'toformat'

import { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'
import { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'
import { Fraction } from './fraction'

const Big = toFormat(_Big)

export class CurrencyAmount extends Fraction {
  public readonly currency: Currency

  /**
   * Helper that calls the constructor with the ETHER currency
   * @param amount ether amount in wei
   */
  public static ether(amount: BigintIsh): CurrencyAmount {
    return new CurrencyAmount(ETHER, amount)
  }

  // amount _must_ be raw, i.e. in the native representation
  protected constructor(currency: Currency, amount: BigintIsh) {
    const parsedAmount = parseBigintIsh(amount)
    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)

    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))
    this.currency = currency
  }

  public get raw(): JSBI {
    return this.numerator
  }

  public add(other: CurrencyAmount): CurrencyAmount {
    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')
    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))
  }

  public subtract(other: CurrencyAmount): CurrencyAmount {
    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')
    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))
  }

  public toSignificant(
    significantDigits: number = 6,
    format?: object,
    rounding: Rounding = Rounding.ROUND_DOWN
  ): string {
    return super.toSignificant(significantDigits, format, rounding)
  }

  public toFixed(
    decimalPlaces: number = this.currency.decimals,
    format?: object,
    rounding: Rounding = Rounding.ROUND_DOWN
  ): string {
    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')
    return super.toFixed(decimalPlaces, format, rounding)
  }

  public toExact(format: object = { groupSeparator: '' }): string {
    Big.DP = this.currency.decimals
    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)
  }
}
","import { CurrencyAmount } from './currencyAmount'
import { Token } from '../token'
import invariant from 'tiny-invariant'
import JSBI from 'jsbi'

import { BigintIsh } from '../../constants'

export class TokenAmount extends CurrencyAmount {
  public readonly token: Token

  // amount _must_ be raw, i.e. in the native representation
  public constructor(token: Token, amount: BigintIsh) {
    super(token, amount)
    this.token = token
  }

  public add(other: TokenAmount): TokenAmount {
    invariant(this.token.equals(other.token), 'TOKEN')
    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))
  }

  public subtract(other: TokenAmount): TokenAmount {
    invariant(this.token.equals(other.token), 'TOKEN')
    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))
  }
}
","import { Token } from '../token'
import { TokenAmount } from './tokenAmount'
import { currencyEquals } from '../token'
import invariant from 'tiny-invariant'
import JSBI from 'jsbi'

import { BigintIsh, Rounding, TEN } from '../../constants'
import { Currency } from '../currency'
import { Route } from '../route'
import { Fraction } from './fraction'
import { CurrencyAmount } from './currencyAmount'

export class Price extends Fraction {
  public readonly baseCurrency: Currency // input i.e. denominator
  public readonly quoteCurrency: Currency // output i.e. numerator
  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token

  public static fromRoute(route: Route): Price {
    const prices: Price[] = []
    for (const [i, pair] of route.pairs.entries()) {
      prices.push(
        route.path[i].equals(pair.token0)
          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)
          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)
      )
    }
    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])
  }

  // denominator and numerator _must_ be raw, i.e. in the native representation
  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {
    super(numerator, denominator)

    this.baseCurrency = baseCurrency
    this.quoteCurrency = quoteCurrency
    this.scalar = new Fraction(
      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),
      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))
    )
  }

  public get raw(): Fraction {
    return new Fraction(this.numerator, this.denominator)
  }

  public get adjusted(): Fraction {
    return super.multiply(this.scalar)
  }

  public invert(): Price {
    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)
  }

  public multiply(other: Price): Price {
    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')
    const fraction = super.multiply(other)
    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)
  }

  // performs floor division on overflow
  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {
    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')
    if (this.quoteCurrency instanceof Token) {
      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)
    }
    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)
  }

  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {
    return this.adjusted.toSignificant(significantDigits, format, rounding)
  }

  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {
    return this.adjusted.toFixed(decimalPlaces, format, rounding)
  }
}
","import { Price } from './fractions/price'
import { TokenAmount } from './fractions/tokenAmount'
import invariant from 'tiny-invariant'
import JSBI from 'jsbi'
import { pack, keccak256 } from '@ethersproject/solidity'
import { getCreate2Address } from '@ethersproject/address'

import {
  BigintIsh,
  FACTORY_ADDRESS,
  INIT_CODE_HASH,
  MINIMUM_LIQUIDITY,
  ZERO,
  ONE,
  FIVE,
  _997,
  _1000,
  ChainId
} from '../constants'
import { sqrt, parseBigintIsh } from '../utils'
import { InsufficientReservesError, InsufficientInputAmountError } from '../errors'
import { Token } from './token'

let PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}

export class Pair {
  public readonly liquidityToken: Token
  private readonly tokenAmounts: [TokenAmount, TokenAmount]

  public static getAddress(tokenA: Token, tokenB: Token): string {
    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks

    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {
      PAIR_ADDRESS_CACHE = {
        ...PAIR_ADDRESS_CACHE,
        [tokens[0].address]: {
          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],
          [tokens[1].address]: getCreate2Address(
            FACTORY_ADDRESS,
            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),
            INIT_CODE_HASH
          )
        }
      }
    }

    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]
  }

  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {
    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks
      ? [tokenAmountA, tokenAmountB]
      : [tokenAmountB, tokenAmountA]
    this.liquidityToken = new Token(
      tokenAmounts[0].token.chainId,
      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),
      18,
      'ICELP',
      'icecreamswap.com LP'
    )
    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]
  }

  /**
   * Returns true if the token is either token0 or token1
   * @param token to check
   */
  public involvesToken(token: Token): boolean {
    return token.equals(this.token0) || token.equals(this.token1)
  }

  /**
   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0
   */
  public get token0Price(): Price {
    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)
  }

  /**
   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1
   */
  public get token1Price(): Price {
    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)
  }

  /**
   * Return the price of the given token in terms of the other token in the pair.
   * @param token token to return price of
   */
  public priceOf(token: Token): Price {
    invariant(this.involvesToken(token), 'TOKEN')
    return token.equals(this.token0) ? this.token0Price : this.token1Price
  }

  /**
   * Returns the chain ID of the tokens in the pair.
   */
  public get chainId(): ChainId {
    return this.token0.chainId
  }

  public get token0(): Token {
    return this.tokenAmounts[0].token
  }

  public get token1(): Token {
    return this.tokenAmounts[1].token
  }

  public get reserve0(): TokenAmount {
    return this.tokenAmounts[0]
  }

  public get reserve1(): TokenAmount {
    return this.tokenAmounts[1]
  }

  public reserveOf(token: Token): TokenAmount {
    invariant(this.involvesToken(token), 'TOKEN')
    return token.equals(this.token0) ? this.reserve0 : this.reserve1
  }

  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {
    invariant(this.involvesToken(inputAmount.token), 'TOKEN')
    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {
      throw new InsufficientReservesError()
    }
    const inputReserve = this.reserveOf(inputAmount.token)
    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)
    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)
    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)
    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)
    const outputAmount = new TokenAmount(
      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,
      JSBI.divide(numerator, denominator)
    )
    if (JSBI.equal(outputAmount.raw, ZERO)) {
      throw new InsufficientInputAmountError()
    }
    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]
  }

  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {
    invariant(this.involvesToken(outputAmount.token), 'TOKEN')
    if (
      JSBI.equal(this.reserve0.raw, ZERO) ||
      JSBI.equal(this.reserve1.raw, ZERO) ||
      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)
    ) {
      throw new InsufficientReservesError()
    }

    const outputReserve = this.reserveOf(outputAmount.token)
    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)
    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)
    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)
    const inputAmount = new TokenAmount(
      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,
      JSBI.add(JSBI.divide(numerator, denominator), ONE)
    )
    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]
  }

  public getLiquidityMinted(
    totalSupply: TokenAmount,
    tokenAmountA: TokenAmount,
    tokenAmountB: TokenAmount
  ): TokenAmount {
    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')
    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks
      ? [tokenAmountA, tokenAmountB]
      : [tokenAmountB, tokenAmountA]
    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')

    let liquidity: JSBI
    if (JSBI.equal(totalSupply.raw, ZERO)) {
      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)
    } else {
      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)
      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)
      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1
    }
    if (!JSBI.greaterThan(liquidity, ZERO)) {
      throw new InsufficientInputAmountError()
    }
    return new TokenAmount(this.liquidityToken, liquidity)
  }

  public getLiquidityValue(
    token: Token,
    totalSupply: TokenAmount,
    liquidity: TokenAmount,
    feeOn: boolean = false,
    kLast?: BigintIsh
  ): TokenAmount {
    invariant(this.involvesToken(token), 'TOKEN')
    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')
    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')
    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')

    let totalSupplyAdjusted: TokenAmount
    if (!feeOn) {
      totalSupplyAdjusted = totalSupply
    } else {
      invariant(!!kLast, 'K_LAST')
      const kLastParsed = parseBigintIsh(kLast)
      if (!JSBI.equal(kLastParsed, ZERO)) {
        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))
        const rootKLast = sqrt(kLastParsed)
        if (JSBI.greaterThan(rootK, rootKLast)) {
          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))
          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)
          const feeLiquidity = JSBI.divide(numerator, denominator)
          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))
        } else {
          totalSupplyAdjusted = totalSupply
        }
      } else {
        totalSupplyAdjusted = totalSupply
      }
    }

    return new TokenAmount(
      token,
      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)
    )
  }
}
","import { ChainId } from '../constants'
import invariant from 'tiny-invariant'

import { Currency, ETHER } from './currency'
import { Token, WETH } from './token'
import { Pair } from './pair'
import { Price } from './fractions/price'

export class Route {
  public readonly pairs: Pair[]
  public readonly path: Token[]
  public readonly input: Currency
  public readonly output: Currency
  public readonly midPrice: Price

  public constructor(pairs: Pair[], input: Currency, output?: Currency) {
    invariant(pairs.length > 0, 'PAIRS')
    invariant(
      pairs.every(pair => pair.chainId === pairs[0].chainId),
      'CHAIN_IDS'
    )
    invariant(
      (input instanceof Token && pairs[0].involvesToken(input)) ||
        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),
      'INPUT'
    )
    invariant(
      typeof output === 'undefined' ||
        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||
        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),
      'OUTPUT'
    )

    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]
    for (const [i, pair] of pairs.entries()) {
      const currentInput = path[i]
      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')
      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0
      path.push(output)
    }

    this.pairs = pairs
    this.path = path
    this.midPrice = Price.fromRoute(this)
    this.input = input
    this.output = output ?? path[path.length - 1]
  }

  public get chainId(): ChainId {
    return this.pairs[0].chainId
  }
}
","import { Rounding, _100 } from '../../constants'
import { Fraction } from './fraction'

const _100_PERCENT = new Fraction(_100)

export class Percent extends Fraction {
  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {
    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)
  }

  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {
    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)
  }
}
","import invariant from 'tiny-invariant'

import { ChainId, ONE, TradeType, ZERO } from '../constants'
import { sortedInsert } from '../utils'
import { Currency, ETHER } from './currency'
import { CurrencyAmount } from './fractions/currencyAmount'
import { Fraction } from './fractions/fraction'
import { Percent } from './fractions/percent'
import { Price } from './fractions/price'
import { TokenAmount } from './fractions/tokenAmount'
import { Pair } from './pair'
import { Route } from './route'
import { currencyEquals, Token, WETH } from './token'

/**
 * Returns the percent difference between the mid price and the execution price, i.e. price impact.
 * @param midPrice mid price before the trade
 * @param inputAmount the input amount of the trade
 * @param outputAmount the output amount of the trade
 */
function computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {
  const exactQuote = midPrice.raw.multiply(inputAmount.raw)
  // calculate slippage := (exactQuote - outputAmount) / exactQuote
  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)
  return new Percent(slippage.numerator, slippage.denominator)
}

// minimal interface so the input output comparator may be shared across types
interface InputOutput {
  readonly inputAmount: CurrencyAmount
  readonly outputAmount: CurrencyAmount
}

// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts
// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first
export function inputOutputComparator(a: InputOutput, b: InputOutput): number {
  // must have same input and output token for comparison
  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')
  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')
  if (a.outputAmount.equalTo(b.outputAmount)) {
    if (a.inputAmount.equalTo(b.inputAmount)) {
      return 0
    }
    // trade A requires less input than trade B, so A should come first
    if (a.inputAmount.lessThan(b.inputAmount)) {
      return -1
    } else {
      return 1
    }
  } else {
    // tradeA has less output than trade B, so should come second
    if (a.outputAmount.lessThan(b.outputAmount)) {
      return 1
    } else {
      return -1
    }
  }
}

// extension of the input output comparator that also considers other dimensions of the trade in ranking them
export function tradeComparator(a: Trade, b: Trade) {
  const ioComp = inputOutputComparator(a, b)
  if (ioComp !== 0) {
    return ioComp
  }

  // consider lowest slippage next, since these are less likely to fail
  if (a.priceImpact.lessThan(b.priceImpact)) {
    return -1
  } else if (a.priceImpact.greaterThan(b.priceImpact)) {
    return 1
  }

  // finally consider the number of hops since each hop costs gas
  return a.route.path.length - b.route.path.length
}

export interface BestTradeOptions {
  // how many results to return
  maxNumResults?: number
  // the maximum number of hops a trade should contain
  maxHops?: number
}

/**
 * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.
 * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns
 * the input currency amount.
 */
function wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {
  if (currencyAmount instanceof TokenAmount) return currencyAmount
  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)
  invariant(false, 'CURRENCY')
}

function wrappedCurrency(currency: Currency, chainId: ChainId): Token {
  if (currency instanceof Token) return currency
  if (currency === ETHER) return WETH[chainId]
  invariant(false, 'CURRENCY')
}

/**
 * Represents a trade executed against a list of pairs.
 * Does not account for slippage, i.e. trades that front run this trade and move the price.
 */
export class Trade {
  /**
   * The route of the trade, i.e. which pairs the trade goes through.
   */
  public readonly route: Route
  /**
   * The type of the trade, either exact in or exact out.
   */
  public readonly tradeType: TradeType
  /**
   * The input amount for the trade assuming no slippage.
   */
  public readonly inputAmount: CurrencyAmount
  /**
   * The output amount for the trade assuming no slippage.
   */
  public readonly outputAmount: CurrencyAmount
  /**
   * The price expressed in terms of output amount/input amount.
   */
  public readonly executionPrice: Price
  /**
   * The mid price after the trade executes assuming no slippage.
   */
  public readonly nextMidPrice: Price
  /**
   * The percent difference between the mid price before the trade and the trade execution price.
   */
  public readonly priceImpact: Percent

  /**
   * Constructs an exact in trade with the given amount in and route
   * @param route route of the exact in trade
   * @param amountIn the amount being passed in
   */
  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {
    return new Trade(route, amountIn, TradeType.EXACT_INPUT)
  }

  /**
   * Constructs an exact out trade with the given amount out and route
   * @param route route of the exact out trade
   * @param amountOut the amount returned by the trade
   */
  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {
    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)
  }

  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {
    const amounts: TokenAmount[] = new Array(route.path.length)
    const nextPairs: Pair[] = new Array(route.pairs.length)
    if (tradeType === TradeType.EXACT_INPUT) {
      invariant(currencyEquals(amount.currency, route.input), 'INPUT')
      amounts[0] = wrappedAmount(amount, route.chainId)
      for (let i = 0; i < route.path.length - 1; i++) {
        const pair = route.pairs[i]
        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])
        amounts[i + 1] = outputAmount
        nextPairs[i] = nextPair
      }
    } else {
      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')
      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)
      for (let i = route.path.length - 1; i > 0; i--) {
        const pair = route.pairs[i - 1]
        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])
        amounts[i - 1] = inputAmount
        nextPairs[i - 1] = nextPair
      }
    }

    this.route = route
    this.tradeType = tradeType
    this.inputAmount =
      tradeType === TradeType.EXACT_INPUT
        ? amount
        : route.input === ETHER
        ? CurrencyAmount.ether(amounts[0].raw)
        : amounts[0]
    this.outputAmount =
      tradeType === TradeType.EXACT_OUTPUT
        ? amount
        : route.output === ETHER
        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)
        : amounts[amounts.length - 1]
    this.executionPrice = new Price(
      this.inputAmount.currency,
      this.outputAmount.currency,
      this.inputAmount.raw,
      this.outputAmount.raw
    )
    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))
    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)
  }

  /**
   * Get the minimum amount that must be received from this trade for the given slippage tolerance
   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade
   */
  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {
    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')
    if (this.tradeType === TradeType.EXACT_OUTPUT) {
      return this.outputAmount
    } else {
      const slippageAdjustedAmountOut = new Fraction(ONE)
        .add(slippageTolerance)
        .invert()
        .multiply(this.outputAmount.raw).quotient
      return this.outputAmount instanceof TokenAmount
        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)
        : CurrencyAmount.ether(slippageAdjustedAmountOut)
    }
  }

  /**
   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance
   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade
   */
  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {
    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')
    if (this.tradeType === TradeType.EXACT_INPUT) {
      return this.inputAmount
    } else {
      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient
      return this.inputAmount instanceof TokenAmount
        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)
        : CurrencyAmount.ether(slippageAdjustedAmountIn)
    }
  }

  /**
   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token
   * amount to an output token, making at most `maxHops` hops.
   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting
   * the amount in among multiple routes.
   * @param pairs the pairs to consider in finding the best trade
   * @param currencyAmountIn exact amount of input currency to spend
   * @param currencyOut the desired currency out
   * @param maxNumResults maximum number of results to return
   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair
   * @param currentPairs used in recursion; the current list of pairs
   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter
   * @param bestTrades used in recursion; the current list of best trades
   */
  public static bestTradeExactIn(
    pairs: Pair[],
    currencyAmountIn: CurrencyAmount,
    currencyOut: Currency,
    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},
    // used in recursion.
    currentPairs: Pair[] = [],
    originalAmountIn: CurrencyAmount = currencyAmountIn,
    bestTrades: Trade[] = []
  ): Trade[] {
    invariant(pairs.length > 0, 'PAIRS')
    invariant(maxHops > 0, 'MAX_HOPS')
    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')
    const chainId: ChainId | undefined =
      currencyAmountIn instanceof TokenAmount
        ? currencyAmountIn.token.chainId
        : currencyOut instanceof Token
        ? currencyOut.chainId
        : undefined
    invariant(chainId !== undefined, 'CHAIN_ID')

    const amountIn = wrappedAmount(currencyAmountIn, chainId)
    const tokenOut = wrappedCurrency(currencyOut, chainId)
    for (let i = 0; i < pairs.length; i++) {
      const pair = pairs[i]
      // pair irrelevant
      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue
      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue

      let amountOut: TokenAmount
      try {
        ;[amountOut] = pair.getOutputAmount(amountIn)
      } catch (error) {
        // input too low
        if (error.isInsufficientInputAmountError) {
          continue
        }
        throw error
      }
      // we have arrived at the output token, so this is the final trade of one of the paths
      if (amountOut.token.equals(tokenOut)) {
        sortedInsert(
          bestTrades,
          new Trade(
            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),
            originalAmountIn,
            TradeType.EXACT_INPUT
          ),
          maxNumResults,
          tradeComparator
        )
      } else if (maxHops > 1 && pairs.length > 1) {
        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))

        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops
        Trade.bestTradeExactIn(
          pairsExcludingThisPair,
          amountOut,
          currencyOut,
          {
            maxNumResults,
            maxHops: maxHops - 1
          },
          [...currentPairs, pair],
          originalAmountIn,
          bestTrades
        )
      }
    }

    return bestTrades
  }

  /**
   * similar to the above method but instead targets a fixed output amount
   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token
   * to an output token amount, making at most `maxHops` hops
   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting
   * the amount in among multiple routes.
   * @param pairs the pairs to consider in finding the best trade
   * @param currencyIn the currency to spend
   * @param currencyAmountOut the exact amount of currency out
   * @param maxNumResults maximum number of results to return
   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair
   * @param currentPairs used in recursion; the current list of pairs
   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter
   * @param bestTrades used in recursion; the current list of best trades
   */
  public static bestTradeExactOut(
    pairs: Pair[],
    currencyIn: Currency,
    currencyAmountOut: CurrencyAmount,
    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},
    // used in recursion.
    currentPairs: Pair[] = [],
    originalAmountOut: CurrencyAmount = currencyAmountOut,
    bestTrades: Trade[] = []
  ): Trade[] {
    invariant(pairs.length > 0, 'PAIRS')
    invariant(maxHops > 0, 'MAX_HOPS')
    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')
    const chainId: ChainId | undefined =
      currencyAmountOut instanceof TokenAmount
        ? currencyAmountOut.token.chainId
        : currencyIn instanceof Token
        ? currencyIn.chainId
        : undefined
    invariant(chainId !== undefined, 'CHAIN_ID')

    const amountOut = wrappedAmount(currencyAmountOut, chainId)
    const tokenIn = wrappedCurrency(currencyIn, chainId)
    for (let i = 0; i < pairs.length; i++) {
      const pair = pairs[i]
      // pair irrelevant
      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue
      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue

      let amountIn: TokenAmount
      try {
        ;[amountIn] = pair.getInputAmount(amountOut)
      } catch (error) {
        // not enough liquidity in this pair
        if (error.isInsufficientReservesError) {
          continue
        }
        throw error
      }
      // we have arrived at the input token, so this is the first trade of one of the paths
      if (amountIn.token.equals(tokenIn)) {
        sortedInsert(
          bestTrades,
          new Trade(
            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),
            originalAmountOut,
            TradeType.EXACT_OUTPUT
          ),
          maxNumResults,
          tradeComparator
        )
      } else if (maxHops > 1 && pairs.length > 1) {
        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))

        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops
        Trade.bestTradeExactOut(
          pairsExcludingThisPair,
          currencyIn,
          amountIn,
          {
            maxNumResults,
            maxHops: maxHops - 1
          },
          [pair, ...currentPairs],
          originalAmountOut,
          bestTrades
        )
      }
    }

    return bestTrades
  }
}
","import { TradeType } from './constants'
import invariant from 'tiny-invariant'
import { validateAndParseAddress } from './utils'
import { CurrencyAmount, ETHER, Percent, Trade } from './entities'

/**
 * Options for producing the arguments to send call to the router.
 */
export interface TradeOptions {
  /**
   * How much the execution price is allowed to move unfavorably from the trade execution price.
   */
  allowedSlippage: Percent
  /**
   * How long the swap is valid until it expires, in seconds.
   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters
   * are generated.
   */
  ttl: number
  /**
   * The account that should receive the output of the swap.
   */
  recipient: string

  /**
   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods
   */
  feeOnTransfer?: boolean
}

export interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {
  /**
   * When the transaction expires.
   * This is an atlernate to specifying the ttl, for when you do not want to use local time.
   */
  deadline: number
}

/**
 * The parameters to use in the call to the Uniswap V2 Router to execute a trade.
 */
export interface SwapParameters {
  /**
   * The method to call on the Uniswap V2 Router.
   */
  methodName: string
  /**
   * The arguments to pass to the method, all hex encoded.
   */
  args: (string | string[])[]
  /**
   * The amount of wei to send in hex.
   */
  value: string
}

function toHex(currencyAmount: CurrencyAmount) {
  return `0x${currencyAmount.raw.toString(16)}`
}

const ZERO_HEX = '0x0'

/**
 * Represents the Uniswap V2 Router, and has static methods for helping execute trades.
 */
export abstract class Router {
  /**
   * Cannot be constructed.
   */
  private constructor() {}
  /**
   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.
   * @param trade to produce call parameters for
   * @param options options for the call parameters
   */
  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {
    const etherIn = trade.inputAmount.currency === ETHER
    const etherOut = trade.outputAmount.currency === ETHER
    // the router does not support both ether in and out
    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')
    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')

    const to: string = validateAndParseAddress(options.recipient)
    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))
    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))
    const path: string[] = trade.route.path.map(token => token.address)
    const deadline =
      'ttl' in options
        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`
        : `0x${options.deadline.toString(16)}`

    const useFeeOnTransfer = Boolean(options.feeOnTransfer)

    let methodName: string
    let args: (string | string[])[]
    let value: string
    switch (trade.tradeType) {
      case TradeType.EXACT_INPUT:
        if (etherIn) {
          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'
          // (uint amountOutMin, address[] calldata path, address to, uint deadline)
          args = [amountOut, path, to, deadline]
          value = amountIn
        } else if (etherOut) {
          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'
          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
          args = [amountIn, amountOut, path, to, deadline]
          value = ZERO_HEX
        } else {
          methodName = useFeeOnTransfer
            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'
            : 'swapExactTokensForTokens'
          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
          args = [amountIn, amountOut, path, to, deadline]
          value = ZERO_HEX
        }
        break
      case TradeType.EXACT_OUTPUT:
        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')
        if (etherIn) {
          methodName = 'swapETHForExactTokens'
          // (uint amountOut, address[] calldata path, address to, uint deadline)
          args = [amountOut, path, to, deadline]
          value = amountIn
        } else if (etherOut) {
          methodName = 'swapTokensForExactETH'
          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
          args = [amountOut, amountIn, path, to, deadline]
          value = ZERO_HEX
        } else {
          methodName = 'swapTokensForExactTokens'
          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
          args = [amountOut, amountIn, path, to, deadline]
          value = ZERO_HEX
        }
        break
    }
    return {
      methodName,
      args,
      value
    }
  }
}
","import { Contract } from '@ethersproject/contracts'
import { getNetwork } from '@ethersproject/networks'
import { getDefaultProvider } from '@ethersproject/providers'
import { TokenAmount } from './entities/fractions/tokenAmount'
import { Pair } from './entities/pair'
import IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'
import invariant from 'tiny-invariant'
import ERC20 from './abis/ERC20.json'
import { ChainId } from './constants'
import { Token } from './entities/token'

let TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {
  [ChainId.MAINNET]: {
    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD
  }
}

/**
 * Contains methods for constructing instances of pairs and tokens from on-chain data.
 */
export abstract class Fetcher {
  /**
   * Cannot be constructed.
   */
  private constructor() {}

  /**
   * Fetch information for a given token on the given chain, using the given ethers provider.
   * @param chainId chain of the token
   * @param address address of the token on the chain
   * @param provider provider used to fetch the token
   * @param symbol optional symbol of the token
   * @param name optional name of the token
   */
  public static async fetchTokenData(
    chainId: ChainId,
    address: string,
    provider = getDefaultProvider(getNetwork(chainId)),
    symbol?: string,
    name?: string
  ): Promise<Token> {
    const parsedDecimals =
      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'
        ? TOKEN_DECIMALS_CACHE[chainId][address]
        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {
            TOKEN_DECIMALS_CACHE = {
              ...TOKEN_DECIMALS_CACHE,
              [chainId]: {
                ...TOKEN_DECIMALS_CACHE?.[chainId],
                [address]: decimals
              }
            }
            return decimals
          })
    return new Token(chainId, address, parsedDecimals, symbol, name)
  }

  /**
   * Fetches information about a pair and constructs a pair from the given two tokens.
   * @param tokenA first token
   * @param tokenB second token
   * @param provider the provider to use to fetch the data
   */
  public static async fetchPairData(
    tokenA: Token,
    tokenB: Token,
    provider = getDefaultProvider(getNetwork(tokenA.chainId))
  ): Promise<Pair> {
    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')
    const address = Pair.getAddress(tokenA, tokenB)
    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()
    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]
    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))
  }
}
"],"names":["ChainId","TradeType","Rounding","SolidityType","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}